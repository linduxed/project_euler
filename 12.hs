{-
 - The sequence of triangle numbers is generated by adding the natural numbers.
 - The 7th triangle number would therefore be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 - The first ten terms would be:
 -
 - 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 -
 - 28 is the first triangle number to have over five divisors.
 - What is the value of the first triangle number to have over five hundred
 - divisors?
 -}

import Data.List
import Data.Maybe

problem12 :: Integer
problem12 = fromMaybe 0 $ find ((>500) . length . divisors) triangleNumbers

triangleNumbers :: [Integer]
triangleNumbers = 1 : loop 1 2 where
    loop currentSum n = currentSum + n : loop (currentSum + n) (n + 1)

-- Only check up to the square root of the max value, since mirror factors will
-- be present above that.
divisors :: Integer -> [Integer]
divisors val = divsBelowSQRT ++ divsAboveSQRT where
    divsBelowSQRT = filter ((==0) . (val `mod`)) [1..(truncate $ sqrt (fromInteger val :: Double))]
    divsAboveSQRT = map (val `div`) divsBelowSQRT
